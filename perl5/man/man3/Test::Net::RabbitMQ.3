.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Net::RabbitMQ 3"
.TH Test::Net::RabbitMQ 3 "2012-02-28" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Net::RabbitMQ \- A mock RabbitMQ implementation for use when testing.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test::Net::RabbitMQ;
\&
\&    my $mq = Test::Net::RabbitMQ\->new;
\&
\&    $mq\->connect;
\&
\&    $mq\->channel_open(1);
\&
\&    $mq\->exchange_declare(1, \*(Aqorder\*(Aq);
\&    $mq\->queue_declare(1, \*(Aqnew\-orders\*(Aq);
\&
\&    $mq\->queue_bind(1, \*(Aqnew\-orders\*(Aq, \*(Aqorder\*(Aq, \*(Aqorder.new\*(Aq);
\&
\&    $mq\->publish(1, \*(Aqorder.new\*(Aq, \*(Aqhello!\*(Aq, { exchange => \*(Aqorder\*(Aq });
\&
\&    $mq\->consume(1, \*(Aqnew\-orders\*(Aq);
\&
\&    my $msg = $mq\->recv;
\&    
\&    # Or
\&    
\&    my $msg = $mq\->get(1, \*(Aqorder.new\*(Aq, {});
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Test::Net::RabbitMQ is a terrible approximation of using the real thing, but
hopefully will allow you to test systems that use Net::RabbitMQ without
having to use an actual RabbitMQ instance.
.PP
The general overview is that calls to \f(CW\*(C`publish\*(C'\fR pushes a message into one
or more queues (or none if there are no bindings) and calls to \f(CW\*(C`recv\*(C'\fR
pop them.
.SH "CAVEATS"
.IX Header "CAVEATS"
This module has all the features I've needed to successfully test our 
RabbitMQ-using application. Patches are welcome if I'm missing something you
need! At the moment there are a number of shortcomings:
.ie n .IP """recv"" doesn't block" 4
.el .IP "\f(CWrecv\fR doesn't block" 4
.IX Item "recv doesn't block"
.PD 0
.IP "exchanges are all topic" 4
.IX Item "exchanges are all topic"
.IP "lots of other stuff!" 4
.IX Item "lots of other stuff!"
.PD
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "connectable"
.IX Subsection "connectable"
If false then any calls to connect will die to emulate a failed connection.
.SS "debug"
.IX Subsection "debug"
If set to true (which you can do at any time) then a message will be emmitted
to \s-1STDERR\s0 any time a message is added to a queue.
.SH "METHODS"
.IX Header "METHODS"
.SS "channel_open($number)"
.IX Subsection "channel_open($number)"
Opens a channel with the specific number.
.SS "channel_close($number)"
.IX Subsection "channel_close($number)"
Closes the specific channel.
.SS "connect"
.IX Subsection "connect"
Connects this instance.  Does nothing except set \f(CW\*(C`connected\*(C'\fR to true.  Will
throw an exception if you've set \f(CW\*(C`connectable\*(C'\fR to false.
.ie n .SS "consume($channel, $queue)"
.el .SS "consume($channel, \f(CW$queue\fP)"
.IX Subsection "consume($channel, $queue)"
Sets the queue that will be popped when \f(CW\*(C`recv\*(C'\fR is called.
.SS "disconnect"
.IX Subsection "disconnect"
Disconnects this instance by setting \f(CW\*(C`connected\*(C'\fR to false.
.ie n .SS "exchange_declare($channel, $exchange, $options)"
.el .SS "exchange_declare($channel, \f(CW$exchange\fP, \f(CW$options\fP)"
.IX Subsection "exchange_declare($channel, $exchange, $options)"
Creates an exchange of the specified name.
.ie n .SS "get ($channel, $queue, $options)"
.el .SS "get ($channel, \f(CW$queue\fP, \f(CW$options\fP)"
.IX Subsection "get ($channel, $queue, $options)"
Get a message from the queue, if there is one.
.PP
Like \f(CW\*(C`Net::RabbitMQ\*(C'\fR, this will return a hash containing the following
information:
.PP
.Vb 8
\&     {
\&       body => \*(AqMagic Transient Payload\*(Aq, # the reconstructed body
\&       routing_key => \*(Aqnr_test_q\*(Aq,        # route the message took
\&       exchange => \*(Aqnr_test_x\*(Aq,           # exchange used
\&       delivery_tag => 1,                 # (inc\*(Aqd every recv or get)
\&       redelivered => 0,                  # always 0
\&       message_count => 0,                # always 0
\&     }
.Ve
.ie n .SS "queue_bind($channel, $queue, $exchange, $routing_key)"
.el .SS "queue_bind($channel, \f(CW$queue\fP, \f(CW$exchange\fP, \f(CW$routing_key\fP)"
.IX Subsection "queue_bind($channel, $queue, $exchange, $routing_key)"
Binds the specified queue to the specified exchange using the provided
routing key.  \fBNote that, at the moment, this doesn't work with \s-1AMQP\s0 wildcards.
Only with exact matches of the routing key.\fR
.ie n .SS "queue_declare($channel, $queue, $options)"
.el .SS "queue_declare($channel, \f(CW$queue\fP, \f(CW$options\fP)"
.IX Subsection "queue_declare($channel, $queue, $options)"
Creates a queue of the specified name.
.ie n .SS "queue_unbind($channel, $queue, $exchange, $routing_key)"
.el .SS "queue_unbind($channel, \f(CW$queue\fP, \f(CW$exchange\fP, \f(CW$routing_key\fP)"
.IX Subsection "queue_unbind($channel, $queue, $exchange, $routing_key)"
Unbinds the specified routing key from the provided queue and exchange.
.ie n .SS "publish($channel, $routing_key, $body, $options)"
.el .SS "publish($channel, \f(CW$routing_key\fP, \f(CW$body\fP, \f(CW$options\fP)"
.IX Subsection "publish($channel, $routing_key, $body, $options)"
Publishes the specified body with the supplied routing key.  If there is a
binding that matches then the message will be added to the appropriate queue(s).
.SS "recv"
.IX Subsection "recv"
Provided you've called \f(CW\*(C`consume\*(C'\fR then calls to recv will \f(CW\*(C`pop\*(C'\fR the next
message of the queue.  \fBNote that this method does not block.\fR
.PP
Like \f(CW\*(C`Net::RabbitMQ\*(C'\fR, this will return a hash containing the following
information:
.PP
.Vb 8
\&     {
\&       body => \*(AqMagic Transient Payload\*(Aq, # the reconstructed body
\&       routing_key => \*(Aqnr_test_q\*(Aq,        # route the message took
\&       exchange => \*(Aqnr_test_x\*(Aq,           # exchange used
\&       delivery_tag => 1,                 # (inc\*(Aqd every recv or get)
\&       consumer_tag => \*(Aq\*(Aq,                # Always blank currently
\&       props => $props,                   # hashref sent in
\&     }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Cory G Watson, \f(CW\*(C`<gphat at cpan.org>\*(C'\fR
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2010 Cory G Watson.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
